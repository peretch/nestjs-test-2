import {
  UseInterceptors,
  NestInterceptor,
  ExecutionContext,
  CallHandler,
} from '@nestjs/common';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';
import { plainToInstance } from 'class-transformer';

// With this at least our decorator will allow only classes (as a way to ensure the usage of DTOs)
interface ClassConstructor {
  new (...args: any[]): object;
}

// Can be used as custom decorator, because it return a decorator
export function Serialize(dto: ClassConstructor) {
  return UseInterceptors(new SerializeInterceptor(dto));
}

// Will serialize object in JSON
export class SerializeInterceptor implements NestInterceptor {
  constructor(private dto: any) {}

  // Autogenerated
  // intercept(context: ExecutionContext, next: CallHandler<any>): Observable<any> | Promise<Observable<any>> {
  //   throw new Error('Method not implemented.');
  // }

  intercept(context: ExecutionContext, handler: CallHandler): Observable<any> {
    // Run something before a request is handled
    // by the request handler
    // console.log('Im running before the handler', context);

    return handler.handle().pipe(
      map((data: any) => {
        // Run something before the response is sent out
        // console.log('Im running before response is sent out', data);
        return plainToInstance(this.dto, data, {
          excludeExtraneousValues: true, // Only will show values with @Expose decorators in DTO
        });
      }),
    );
  }
}
